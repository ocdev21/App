# WORKING Dockerfile for L1 Network Troubleshooting System
# Lightweight deployment - no PyTorch/transformers, uses rule-based AI
# Fixed Python version compatibility issue

FROM node:20-bullseye

WORKDIR /app

# Install system dependencies - using default Python 3.9 (available in Bullseye)
RUN apt-get update && apt-get install -y \
    python3 \
    python3-dev \
    python3-pip \
    python3-venv \
    build-essential \
    libpcap-dev \
    libopenblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    libhdf5-dev \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Create python symlink and upgrade pip
RUN ln -sf /usr/bin/python3 /usr/bin/python \
    && python -m pip install --upgrade pip setuptools wheel

# Verify Python version
RUN python --version && pip --version

# Copy project files
COPY . .

# Install Node.js dependencies (no plugin issues!)
RUN npm install --production=false

# Install Python AI/ML dependencies
RUN pip install --no-cache-dir -r requirements_all.txt || true
RUN pip install --no-cache-dir -r requirements.txt || true
RUN pip install --no-cache-dir -r requirements_mistral.txt || true

# Build frontend using esbuild (no @vitejs/plugin-react needed)
RUN npm run build

# Clean up dev dependencies
RUN npm prune --production

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000
ENV PYTHONPATH=/app

# Python optimizations (PyTorch/transformers removed for lighter deployment)
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Create minimal cache directory
RUN mkdir -p /app/.cache

# Create non-root user for security
RUN useradd -m -s /bin/bash appuser \
    && chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:5000/ || exit 1

# Start command
CMD ["npm", "run", "dev"]