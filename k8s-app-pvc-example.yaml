# Example: How Your Application Can Share the Same PVC with ML Analyzer
# This shows how to mount the same l1-ml-storage-pvc in your own application

apiVersion: apps/v1
kind: Deployment
metadata:
  name: your-app-deployment
  namespace: l1-app-ai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: your-app
  template:
    metadata:
      labels:
        app: your-app
    spec:
      containers:
      - name: your-app-container
        image: your-app-image:latest
        env:
        - name: PCAP_OUTPUT_DIR
          value: "/shared-pvc/input_files"  # Where to write PCAP files
        
        # Mount the SAME PVC used by ML analyzer
        volumeMounts:
        - name: shared-ml-storage
          mountPath: /shared-pvc/input_files  # Mount only input_files directory
          subPath: input_files
        
        command: ["/bin/bash"]
        args:
        - "-c"
        - |
          echo "Starting your application..."
          
          # Example: Your app generates/copies PCAP files
          while true; do
            # When your app creates a new PCAP file, copy it to shared PVC:
            # cp /tmp/captured-traffic.pcap /shared-pvc/input_files/
            
            # The ML analyzer pod will automatically detect and process it!
            sleep 30
          done
      
      volumes:
      - name: shared-ml-storage
        persistentVolumeClaim:
          claimName: l1-ml-storage-pvc  # Same PVC as ML analyzer!

---
# Example 2: Simple file uploader pod
apiVersion: v1
kind: Pod
metadata:
  name: pcap-uploader
  namespace: l1-app-ai
spec:
  containers:
  - name: uploader
    image: busybox:1.35
    command: ['sh', '-c', 'sleep infinity']
    volumeMounts:
    - name: shared-ml-storage
      mountPath: /upload
      subPath: input_files
  
  volumes:
  - name: shared-ml-storage
    persistentVolumeClaim:
      claimName: l1-ml-storage-pvc

# Usage:
# 1. Deploy this pod: kubectl apply -f k8s-app-pvc-example.yaml
# 2. Copy files: kubectl cp your-file.pcap l1-app-ai/pcap-uploader:/upload/
# 3. ML analyzer automatically processes it!
