# Integrated Dockerfile - L1 Frontend/Backend + GGUF AI Inference Server
# Optimized build with early user creation and better layer caching
# Runs both services in a single container:
# - Port 5000: L1 Web Application (React frontend + Express backend)
# - Port 8000: AI Inference Server (Mistral GGUF with ctransformers)

FROM node:20-bullseye

WORKDIR /app

# Create non-root user EARLY (before copying files to avoid slow chown -R)
RUN useradd -m -u 1001 -s /bin/bash appuser

# Install system dependencies including Python for AI inference
RUN apt-get update && apt-get install -y \
    python3 \
    python3-dev \
    python3-pip \
    python3-venv \ 
    build-essential \
    gcc \
    g++ \
    libpcap-dev \
    libopenblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    libhdf5-dev \
    curl \
    wget \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Create python symlink and upgrade pip
RUN ln -sf /usr/bin/python3 /usr/bin/python \
    && python -m pip install --upgrade pip setuptools wheel

# Install Python AI dependencies - use pre-built wheels when available
# Order: Fast installs first, compiled packages last for better caching
RUN pip install --no-cache-dir --only-binary :all: \
    flask \
    requests \
    psutil \
    clickhouse-connect \
    numpy \
    pandas \
    joblib \
    || pip install --no-cache-dir \
    flask \
    requests \
    psutil \
    clickhouse-connect \
    numpy \
    pandas \
    joblib

# Install packages that may need compilation (separate layer for caching)
RUN pip install --no-cache-dir \
    ctransformers \
    scapy \
    scikit-learn

# Create directories and set ownership
RUN mkdir -p /models /app/.cache /app/input_files \
    && chown -R appuser:appuser /models /app

# Copy GGUF model with correct ownership (separate layer for better caching)
COPY --chown=appuser:appuser mistral-7b-instruct-v0.2.Q4_K_M.gguf /models/mistral.gguf
RUN chmod -R 755 /models

# Copy package files for dependency installation (cache layer until deps change)
COPY --chown=appuser:appuser package*.json ./

# Install ALL Node.js dependencies (dev and prod)
RUN npm install

# Copy all application code with correct ownership
COPY --chown=appuser:appuser . .

# Fix vite config for Docker environment
RUN sed -i 's/allowedHosts: "all"/allowedHosts: true/g' vite.config.ts || true

# Build the application (frontend + backend)
RUN npm run build

# Copy GGUF inference server
COPY --chown=appuser:appuser gguf-inference-server.py /app/gguf-server.py
RUN chmod +x /app/gguf-server.py

# Copy startup script
COPY --chown=appuser:appuser start-services.sh /app/start-services.sh
RUN chmod +x /app/start-services.sh

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Switch to non-root user
USER appuser

# Expose both ports
EXPOSE 5000 8000

# Health check on main app
HEALTHCHECK --interval=30s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:5000/ || exit 1

# Start both services
CMD ["/app/start-services.sh"]
