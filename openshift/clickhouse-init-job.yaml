
---
# ConfigMap for database initialization script
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-init-script
  namespace: l1-app
data:
  init-db.sh: |
    #!/bin/bash
    echo "Waiting for ClickHouse to be ready..."
    
    # Wait for ClickHouse to be available
    until curl -f http://clickhouse-service:8123/ping; do
        echo "Waiting for ClickHouse..."
        sleep 5
    done
    
    echo "ClickHouse is ready, creating database and tables..."
    
    # Create database
    curl -X POST "http://clickhouse-service:8123/" -d "CREATE DATABASE IF NOT EXISTS l1_anomaly_detection"
    
    # Create anomalies table
    curl -X POST "http://clickhouse-service:8123/" -d "
    CREATE TABLE IF NOT EXISTS l1_anomaly_detection.anomalies (
        id String,
        timestamp DateTime,
        anomaly_type String,
        description String,
        severity String,
        source_file String,
        packet_number UInt32,
        line_number UInt32,
        session_id String,
        confidence_score Float64,
        model_agreement UInt8,
        ml_algorithm_details String,
        isolation_forest_score Float64,
        one_class_svm_score Float64,
        dbscan_prediction Int8,
        random_forest_score Float64,
        ensemble_vote String,
        detection_timestamp String,
        status String,
        ecpri_message_type String,
        ecpri_sequence_number UInt32,
        fronthaul_latency_us Float64,
        timing_jitter_us Float64,
        bandwidth_utilization Float64,
        mac_address Nullable(String),
        ue_id Nullable(String),
        details Nullable(String),
        du_mac Nullable(String),
        ru_mac Nullable(String),
        file_path Nullable(String),
        file_type Nullable(String),
        created_at DateTime DEFAULT now()
    ) ENGINE = MergeTree()
    ORDER BY (timestamp, severity, anomaly_type)
    PARTITION BY toYYYYMM(timestamp)
    "
    
    # Create sessions table
    curl -X POST "http://clickhouse-service:8123/" -d "
    CREATE TABLE IF NOT EXISTS l1_anomaly_detection.sessions (
        id String,
        session_id String,
        session_name String,
        start_time DateTime,
        end_time Nullable(DateTime),
        packets_analyzed UInt32 DEFAULT 0,
        anomalies_detected UInt32 DEFAULT 0,
        source_file String,
        folder_path Nullable(String),
        total_files UInt32 DEFAULT 0,
        pcap_files UInt32 DEFAULT 0,
        text_files UInt32 DEFAULT 0,
        total_anomalies UInt32 DEFAULT 0,
        duration_seconds UInt32 DEFAULT 0,
        status String DEFAULT 'active',
        files_to_process UInt32 DEFAULT 0,
        files_processed UInt32 DEFAULT 0,
        processing_time_seconds Float64 DEFAULT 0.0
    ) ENGINE = MergeTree()
    ORDER BY start_time
    "
    
    # Create processed_files table
    curl -X POST "http://clickhouse-service:8123/" -d "
    CREATE TABLE IF NOT EXISTS l1_anomaly_detection.processed_files (
        id String,
        filename String,
        file_type String,
        file_size UInt64,
        upload_date DateTime,
        processing_status String DEFAULT 'pending',
        processing_time DateTime,
        total_samples UInt32,
        anomalies_detected UInt32,
        anomalies_found UInt32 DEFAULT 0,
        session_id String,
        processing_time_ms Nullable(UInt32),
        error_message Nullable(String)
    ) ENGINE = MergeTree()
    ORDER BY upload_date
    "
    
    # Create metrics table
    curl -X POST "http://clickhouse-service:8123/" -d "
    CREATE TABLE IF NOT EXISTS l1_anomaly_detection.metrics (
        id String,
        metric_name String,
        metric_value Float64,
        timestamp DateTime,
        category String,
        session_id Nullable(String),
        source_file Nullable(String)
    ) ENGINE = MergeTree()
    ORDER BY timestamp
    "
    
    echo "Database initialization completed!"
---
# Job to initialize ClickHouse database
apiVersion: batch/v1
kind: Job
metadata:
  name: clickhouse-init
  namespace: l1-app
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init-db
        image: curlimages/curl:latest
        command: ["/bin/sh"]
        args: ["/scripts/init-db.sh"]
        volumeMounts:
        - name: init-script
          mountPath: /scripts
      volumes:
      - name: init-script
        configMap:
          name: clickhouse-init-script
          defaultMode: 0755
  backoffLimit: 3
