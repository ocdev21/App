# Integrated Dockerfile - L1 Frontend/Backend + GGUF AI Inference Server
# Runs both services in a single container:
# - Port 5000: L1 Web Application (React frontend + Express backend)
# - Port 8000: AI Inference Server (Mistral GGUF with ctransformers)

FROM node:20-bullseye

WORKDIR /app

# Install system dependencies including Python for AI inference
RUN apt-get update && apt-get install -y \
    python3 \
    python3-dev \
    python3-pip \
    python3-venv \
    build-essential \
    gcc \
    g++ \
    libpcap-dev \
    libopenblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    libhdf5-dev \
    curl \
    wget \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Create python symlink and upgrade pip
RUN ln -sf /usr/bin/python3 /usr/bin/python \
    && python -m pip install --upgrade pip setuptools wheel

# Install Python AI dependencies for inference server
RUN pip install --no-cache-dir ctransformers flask requests psutil

# Copy project files (frontend + backend)
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY index.html ./
COPY client/ ./client/
COPY server/ ./server/
COPY db/ ./db/
COPY shared/ ./shared/

# Install Node.js dependencies
RUN npm install --production=false

# Build frontend
RUN npm run build

# Clean up dev dependencies
RUN npm prune --production

# Copy GGUF model
COPY mistral-7b-instruct-v0.2.Q4_K_M.gguf /models/mistral.gguf
RUN chmod -R 755 /models

# Copy GGUF inference server
COPY gguf-inference-server.py /app/gguf-server.py
RUN chmod +x /app/gguf-server.py

# Copy startup script
COPY start-services.sh /app/start-services.sh
RUN chmod +x /app/start-services.sh

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Create cache directory
RUN mkdir -p /app/.cache

# Create non-root user
RUN useradd -m -u 1001 -s /bin/bash appuser \
    && chown -R appuser:appuser /app \
    && chown -R appuser:appuser /models

USER appuser

# Expose both ports
EXPOSE 5000 8000

# Health check on main app
HEALTHCHECK --interval=30s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:5000/ || exit 1

# Start both services
CMD ["/app/start-services.sh"]
