# Prometheus + Node Exporter Monitoring Stack
# Namespace: benchmark
# Services exposed via NodePort:
# - Prometheus: 30090
# - Node Exporter: 31008
# RBAC: Cluster-wide access for both Prometheus and Node Exporter to access all pods

---
# ServiceAccount: Prometheus
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: benchmark

---
# ServiceAccount: Node Exporter
apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-exporter-sa
  namespace: benchmark

---
# ClusterRole: Full access to pods, services, endpoints, and nodes for monitoring
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: monitoring-cluster-access
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "services", "endpoints", "nodes", "nodes/metrics", "nodes/proxy"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets", "daemonsets"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding: Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-access
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: benchmark
roleRef:
  kind: ClusterRole
  name: monitoring-cluster-access
  apiGroup: rbac.authorization.k8s.io

---
# ClusterRoleBinding: Node Exporter
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-exporter-cluster-access
subjects:
- kind: ServiceAccount
  name: node-exporter-sa
  namespace: benchmark
roleRef:
  kind: ClusterRole
  name: monitoring-cluster-access
  apiGroup: rbac.authorization.k8s.io

---
# ConfigMap: Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: benchmark
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    scrape_configs:
      # Scrape Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      # Scrape Node Exporter
      - job_name: 'node-exporter'
        static_configs:
          - targets: ['node-exporter:9100']
      
      # Scrape kubelet/cAdvisor for container metrics (CPU, memory per pod/container)
      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          # Map node labels
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          # Set address to node IP:10250 (kubelet port)
          - source_labels: [__address__]
            regex: ([^:]+)(?::\d+)?
            target_label: __address__
            replacement: ${1}:10250
          # Set metrics path to cAdvisor endpoint
          - target_label: __metrics_path__
            replacement: /metrics/cadvisor
      
      # Discover and scrape all pods across all namespaces
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          # Only scrape pods with prometheus.io/scrape annotation
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          # Use custom port if prometheus.io/port annotation is set
          - source_labels: [__meta_kubernetes_pod_ip, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          # Use custom path if prometheus.io/path annotation is set
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          # Add namespace label
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          # Add pod name label
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
      
      # Discover and scrape services across all namespaces
      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          # Only scrape services with prometheus.io/scrape annotation
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          # Add namespace label
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          # Add service name label
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: service

---
# Deployment: Node Exporter
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-exporter
  namespace: benchmark
  labels:
    app: node-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
    spec:
      serviceAccountName: node-exporter-sa
      containers:
      - name: node-exporter
        image: 10.0.1.224:5000/node-exporter:v1.7.0
        imagePullPolicy: Always
        ports:
        - containerPort: 9100
          name: metrics
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

---
# Service: Node Exporter (NodePort)
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: benchmark
  labels:
    app: node-exporter
spec:
  type: NodePort
  selector:
    app: node-exporter
  ports:
  - port: 9100
    targetPort: 9100
    nodePort: 31008
    name: metrics

---
# Deployment: Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: benchmark
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus-sa
      containers:
      - name: prometheus
        image: 10.0.1.224:5000/prometheus:v2.48.0
        imagePullPolicy: Always
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
        ports:
        - containerPort: 9090
          name: web
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        emptyDir: {}

---
# Service: Prometheus (NodePort)
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: benchmark
  labels:
    app: prometheus
spec:
  type: NodePort
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090
    name: web
