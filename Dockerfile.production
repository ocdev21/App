# Production Dockerfile for L1 Network Troubleshooting System
# Complete AI/ML + Node.js + Python stack for OpenShift deployment

FROM ubuntu:22.04

# Set working directory
WORKDIR /app

# Prevent interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    gcc \
    g++ \
    make \
    cmake \
    # Python and pip
    python3.11 \
    python3.11-dev \
    python3-pip \
    python3.11-venv \
    # Node.js prerequisites
    curl \
    wget \
    gnupg \
    ca-certificates \
    # System libraries for ML packages
    libopenblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    gfortran \
    # Network analysis dependencies  
    libpcap-dev \
    tcpdump \
    # Graphics and visualization
    libfreetype6-dev \
    libpng-dev \
    libjpeg-dev \
    # HDF5 for data processing
    libhdf5-dev \
    libhdf5-serial-dev \
    # Additional utilities
    git \
    unzip \
    lsb-release \
    software-properties-common \
    # Clean up
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Node.js 20 LTS
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Create python3 symlink and upgrade pip
RUN ln -sf /usr/bin/python3.11 /usr/bin/python \
    && python -m pip install --no-cache-dir --upgrade pip setuptools wheel

# Install PyTorch first (CPU optimized for production)
RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

# Copy requirements files
COPY requirements_all.txt ./
COPY requirements.txt ./
COPY requirements_mistral.txt ./

# Install all Python dependencies
RUN pip install --no-cache-dir -r requirements_all.txt
RUN pip install --no-cache-dir -r requirements.txt || true
RUN pip install --no-cache-dir -r requirements_mistral.txt || true

# Copy package files for Node.js dependencies
COPY package*.json ./

# Install Node.js dependencies (including dev dependencies for build)
RUN npm ci

# Copy the entire project
COPY . .

# Build the frontend
RUN npm run build

# Clean up dev dependencies after build to reduce image size
RUN npm prune --production

# Set environment variables for production
ENV NODE_ENV=production
ENV PORT=5000
ENV PYTHONPATH=/app
ENV NODE_PATH=/app/node_modules

# AI and ML optimizations
ENV TRANSFORMERS_CACHE=/app/.cache/transformers
ENV HF_HOME=/app/.cache/huggingface
ENV TORCH_HOME=/app/.cache/torch
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV OMP_NUM_THREADS=4
ENV MKL_NUM_THREADS=4

# Create cache directories and set permissions
RUN mkdir -p /app/.cache/transformers /app/.cache/huggingface /app/.cache/torch \
    && chmod -R 755 /app/.cache \
    && chmod +x /app/server/index.py || true

# Create non-root user for security
RUN useradd -m -s /bin/bash appuser \
    && chown -R appuser:appuser /app
USER appuser

# Expose the application port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:5000/health || curl -f http://localhost:5000/ || exit 1

# Default command - run the production server
CMD ["npm", "run", "dev"]